name: Scheduled Docker image

on:
  push:
    branches:
      - "*"
  schedule:
    - cron: '0 12 * * *'

jobs:
  process_image_tags:
    name: Process Grafana tags
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Fetch image tags
        id: fetch_tags
        run: |
          echo "Fetching tags..."
          TAGS=$(curl -s "https://registry.hub.docker.com/v2/repositories/grafana/grafana/tags" | jq -r ".results[].name" | paste -sd "," -)
          echo $TAGS
          echo "tags=$TAGS" >> $GITHUB_OUTPUT 

      - name: Create JSON matrix
        id: set_matrix
        env:
          TAGS: ${{ steps.fetch_tags.outputs.TAGS }}
        run: |
          # Convert comma-separated tags into a JSON array
          JSON_ARRAY=$(echo $TAGS | jq -R -s -c 'split(",")[:-1]')
          echo "matrix={\"include\":$(echo $JSON_ARRAY | jq -c '[.[] | {"tag": .}]')}" >> $GITHUB_OUTPUT

  test_tag:
    name: Test (${{ matrix.tag }})
    needs: process_image_tags
    strategy:
      matrix: ${{fromJson(needs.process_image_tags.outputs.matrix)}}
      fail-fast: false
    with:
      TAG: ${{ matrix.tag }}
    uses: ./.github/workflows/test.yml

  agregate_tags:
    name: Agregate Tags
    needs: ["test_tag"]
    outputs:
      sucessfull-tags: ${{ steps.collect_success.outputs.successful-tags}}
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Collect Successful Tags
        id: collect_success
        run: |
          mkdir -p results
          for dir in result-*; do
            if [[ -d "$dir" ]]; then
              TAG_DIR=${dir#result-}  # Extract tag name from directory name
              mv "$dir/result.txt" "results/$TAG_DIR.txt"
            fi
          done

          # Initialize an empty array to hold successful tags
          SUCCESSFUL_TAGS=()
          for file in results/*.txt; do
            TAG=${file#results/}  # Extract tag name from file name
            TAG=${TAG%.txt}  # Remove .txt extension
            RESULT=$(cat "$file")
            if [[ "$RESULT" == "success" ]]; then
              SUCCESSFUL_TAGS+=("$TAG")
            fi
          done

          # Convert the array of successful tags to a JSON string and set as output
          SUCCESSFUL_TAGS_JSON=$(printf '%s\n' "${SUCCESSFUL_TAGS[@]}" | jq -R -s -c 'split("\n")[:-1]')
          echo "successful-tags=$SUCCESSFUL_TAGS_JSON" >> $GITHUB_OUTPUT

  push_tags:
    needs: agregate_tags
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tag: ${{fromJson(needs.agregate_tags.outputs.sucessfull-tags)}}
    steps:
      - name: Deploy Tag ${{ matrix.tag }}
        run: |
          # Your deployment or processing commands here, using ${{ matrix.tag }} as the tag to process
        
      
        
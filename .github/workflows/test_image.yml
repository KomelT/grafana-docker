# Docker compose actions: https://github.com/marketplace/actions/docker-compose-action
# Build and push Docker images: https://github.com/marketplace/actions/build-and-push-docker-images

name: Test Image

on:
  workflow_call:
    inputs:
      TAG:
        type: string
        required: true

jobs:
  compose_up:
    name: Compose up
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker compose up
        uses: isbang/compose-action@v1.5.1
        with:
          compose-file: ./docker-compose.ci.yaml
        env:
          GRAFANA_VERSION: ${{ inputs.TAG }}

      - name: Wait for Grafana to be ready
        timeout-minutes: 10
        run: |
          status=0
          sleep 10
          while [ $status -ne 200 ]; do
            status=$(curl -o /dev/null -s -w "%{http_code}\n" http://localhost:3000/api/health || echo 0)
            if [ $status -eq 200 ]; then
              echo "Service is up with status: $status"
              break
            else
              echo "Waiting for service to be up... Status: $status"
              sleep 5
            fi
          done

      - name: Test if InfluxDB conf exists in mount
        run: |
          if ! diff ./data/grafana/provisioning/datasources/automatic.yaml ./provisioning/datasources/automatic.yaml > /dev/null; then
            echo "Files are different. Failing the step."
            exit 1
          else
            echo "Files are the same. Continuing."
          fi

      - name: Test in Grafana API if InfluxDB config exists
        run: |
          # Fetch the JSON from the Grafana API
          JSON_FROM_CURL=$(curl -s "http://grafanaadmin:grafanapassword@localhost:3000/api/datasources/1")
      
          # Define the expected JSON
          EXPECTED_JSON='{"id": 1,"jsonData": {"defaultBucket": "testbucket","organization": "testorg","tlsSkipVerify": true,"version": "Flux"},"name": "InfluxDB","type": "influxdb","uid": "P951FEA4DE68E13C5","url": "http://influxdb:8086"}'

          echo $JSON_FROM_CURL
          echo $EXPECTED_JSON

          # Normalize and compare the JSON
          if ! diff <(echo $JSON_FROM_CURL | jq --sort-keys '. | {id: .id, uid: .uid, name: .name, type: .type, url: .url, jsonData: .jsonData}' .) <(echo $EXPECTED_JSON | jq --sort-keys .) > /dev/null; then
            echo "JSON structures are different. Failing the step."
            exit 1
          else
            echo "JSON structures are the same. Continuing."
          fi
      

  build_test:
    name: Build Test
    outputs:
      DIGEST_LOCAL: ${{ steps.build_image.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build 'komelt/grafana:${{ inputs.TAG }}'
        id: build_image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: "komelt/grafana:${{ inputs.TAG }}"
          build-args: |
            "GRAFANA_VERSION=${{ inputs.TAG }}"
          no-cache: true

  if_local_image_newer:
    name: Test if local Image is newer
    needs: build_test
    runs-on: ubuntu-latest
    env:
      TAG: ${{ inputs.TAG }}
      DIGEST_REMOTE:
      DIGEST_LOCAL: ${{ needs.build_test.outputs.DIGEST_LOCAL }}
      SKIP_PUSH:
    steps:
      - name: Fetch remote Image Digest
        run: |
          for ((i=1; i <= 2; i++)); do
              response=$(curl -s "https://registry.hub.docker.com/v2/repositories/komelt/grafana/tags/?page=$i")
              DIGEST_TMP=$(echo $response | jq -r --arg TAG "$TAG" '.results[] | select(.name == $TAG) | .digest')
              
              if [[ "$DIGEST_TMP" != "" ]]; then
                  DIGEST_REMOTE=$DIGEST_TMP
                  break
              fi
          done
          echo "Remote Digest: ${DIGEST_REMOTE}"

      - name: Test if digests are different
        run: |
          echo "Remote Digest: ${DIGEST_REMOTE}"
          echo " Local Digest: ${DIGEST_LOCAL}"

          if [[ "$DIGEST_LOCAL" == "$DIGEST_REMOTE" ]]; then
            echo "Local komelt/grafana:${{ inputs.TAG }} has same digest like remote. Skipping..."
            echo "SKIP_PUSH=true" >> $GITHUB_ENV
          fi
  
      - name: Determine and Output Result
        id: output_result
        if: ${{ !env.SKIP_PUSH }}
        run: |
          if [[ ${{ job.status }} == 'success' ]]; then
            echo "success" > result.txt
          else
            echo "failure" > result.txt
          fi
      
      - name: Upload result as artifact
        if: ${{ !env.SKIP_PUSH }}
        uses: actions/upload-artifact@v3
        with:
          name: result-${{ inputs.TAG }}
          path: result.txt